# Complete the isBalanced function below.
def isBalanced(s):
    filo = [] # first enter, last output
    dictionary_open = {
        "{":"}", 
        "[":"]",
        "(":")"
    }
    #print("ini.................")
    #print(s)
    for x in s:
        #print("x {}".format(x))
        if x in dictionary_open.keys():# is a open tag
            filo.append(x)
        else: # should be a close tag
            try:
                last_closed = filo.pop()
                #print("last closed ...{}".format(last_closed))
                if dictionary_open[last_closed] == x:
                    pass # is ok
                else:
                    return "NO"
            except IndexError: # pop from empty list
                return "NO"
        #print("filo {}".format(filo))
    #print("ini.................")

    if len(filo) > 0:
        return "NO"
    return "YES"


if __name__ == '__main__':

    answer = isBalanced(")(((]){))}])}][)(}()])]]([{))])}}}]]([{{}}}]{(}[{}[{[([]{(}[}}]}{}[{[}{]{](({}]]{[)[[[])[}[()}((){}[{()]{([]{){()}}(])[}[]](]}]({{])])]}{)][}[(})}[((}{)[}]]]((}][(}[}[{}}}{])((}[]])(()}{)[}]){{}}}()})))()(}}))({))(]()(}}){(}(){]]]})}]}([)]{]([({]{][}{]})()(}({})}]]{{{}[[]}}}][}{}[[)))(}{](]((}[{]}}{]]][}{([{{}{)}([])({((}({{}){)}}){(){)[]]](}}](}]}[}{}})}))(([][}{])}[[][[{])}{{[)(}]])][[){[}])}(}({]))){({]){((([(}]]([{{[{]}{)){{{][})[)}([[()[[)}[)][([]{()[}{]({({(]}[(][{)}[]{]][[][({[}{((([)})(](}[})}[](}({[[{{){))]]()][[])}])}}{](]({}}{]}[))]({[)][]{))}({[)){]){}}([(()[)]]]{[}{([[[[([))({[{{][){)]]]){([}}[{}([(][]]][[}][{()[{{}[(]]{})([{}}{[){}](]]{[}]](({[(})}){}]{){([))})]}([[})(]{{[{([}))}}{][()[}}[]{)]}{)(]}])][[[([({}[)}][]{}]])}({[)}(]{]](}}}){{[{)[}){){{})](][(}]})())]]([[){{)}}(}[}}[))[[)({[(({]{[(){{[{]{){[}[){([{{[[}[}[({{]{)()(]]{[)((})}][([[{{}}{][[}(]()[)()][)())[{)}{(}}}])([{)}}[]}))(]{)[[()}[([{[}}({{[}([{[({{))(}(]][][{})]]}(]{([{)])(}[}})(]{][]}}]]{]][[]([))}]]{]})]}[")
    print(answer)
    assert answer == "NO", "check your code"

    answer = isBalanced("{()[[[]]({{}[{}]}){((()))([[]]([]{}[]{{()({})[{(())[]}]([{[]}])}()[][[]]()[([{{{(){[[(()(([()]([][]()()){[{}][((()[()])[{(([([]{({})})](){[]{}[[[][{{{}{[()]{[]{}}}(())}}]()[{}{}{[[]][[]{{()}}]}{([[[]]({[]})]{}){}}][[{[()]}]][]{}]{}()]{}})([])){}}[{}[]]{}]){[{}]{{{}[()](){}}[[{}]]{[{}]}{}()([]){}[][]}([]((){[][]{[({{}}[[[][()]][[][]]{}]){[][[]()]{}}[]]({}[{(([[]()](){((({()(){([])()[{{[[{}][]]}(){}[][][[]{}[]{{[(([{}]))]()[]}(())}][([])[{(())}](())[]([[([])]])]}]}}({}{}))))}){{}}(({()}){})[](([]()()[{([]){}(){(({}[]))}}()](()){{}{}}){({})}[[([[]()][])()[]]()])(()))}])()}{({()})(([[]]{()}[]))}})()(){[]})()[{{{}}[]}{}{}[][(({}[[{}(){}]]){{[[]{[{(()[])((([[]])((())))){}[][]}]({})}(())]}{}((){{}((){[[][]]}([]){({}[[]({}{}){}])}(){})}(()))[]}({([][])})()){}]]}{(){}}()]{[]}{}[]{}{{}{}}[{}{{()}}]({(){[]}({}[]()[])({}{{{[]{{}}}{}[][{}[]][][]}[{{()}()[{}[]]{}([]())}]})[]({[]})})[]}{(())[[]]})[](){[[]{}]{}({{}(){[]}}[]{{}[[][]][]()}){{}}})[(()[])[()[[{}()]()]()[]]])][[]({([{{}}])})]]}}}}])]}))}]}")
    print(answer)
    assert answer == "YES", "check your code"